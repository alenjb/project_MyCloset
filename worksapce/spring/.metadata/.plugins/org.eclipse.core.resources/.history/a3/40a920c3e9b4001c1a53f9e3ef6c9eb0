package com.webjjang.board.aop;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;

import lombok.extern.log4j.Log4j;


//자동 생성 -@Controller, @service @repository, Component @restController, @~Advice
@Component
//AOP 프로그램으로 선언
@Aspect
@Log4j
public class LogAdvice {
	
	
	//AOP로 실행이 될 메소드 작성
	@Around("execution(* com.webjjang.*.service.*.*(..))")
	public Object logTimeAndInfo(ProceedingJoinPoint pjp) throws Throwable{
		
		log.info("==================== 실행속도와 처리정보를 출력하는 AOP =======================");
		//실행 전 처리
		// 시작 시간 저장 / 실행 클래스 출력 / 넘어가는 출력 / 실행결과 출력
		//시작 시간 저장
		long start = System.nanoTime();
		// 로그로 실행 객체 이름 출력 ->service
		log.info(" 실행하는 객체: "+pjp.getTarget());
		//로그로 실행 메소드 이름 출력
		log.info("실행 메소드: "+ pjp.getSignature().getName()+ "()");
		
		//실제적인 처리와 결과 저장
		Object result = pjp.proceed();
		
		//실행 후 처리

		//끝 시간 저장 / 처리 소요 시간 출력
		long end= System.nanoTime();
		log.info("처리 소요 시간: "+( end - start )+ " ns");
		
		return result;
		
	}
}
